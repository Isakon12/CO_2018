// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
BREAK		::= "break"
BYTE		::= "byte"
CASE		::= "case"
CATCH		::= "catch"
CHAR        ::= "char"
CLASS       ::= "class"
CONST		::= "const"
CONTINUE	::= "continue"
DEFAULT		::= "default"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
FINAL		::= "final"
FULLY		::= "fully"
FLOAT		::= "float"
FOR			::= "for"
GOTO		::= "goto"
IF          ::= "if"
IMPLEMENTS	:.= "implements"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
INTERFACE	::= "interface"
LONG		::= "long"
NATIVE		::= "native"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
SHORT		::= "short"
STATIC      ::= "static"
STRICTFP	::= "strictfp"
SUPER       ::= "super"
SWITCH		::= "switch"
SYNCHRONIZED::= "synchronized"
THIS        ::= "this"
THROW		::= "throw"
THROWS		::= "throws"
TRANSIENT	::= "transient"
TRY			::= "try"
TRUE        ::= "true"
VOID        ::= "void"
VOLATILE	::= "volatile"
WHILE       ::= "while"

// Operators
ASSIGN      ::= "="
EQUAL       ::= "=="
NOT_EQUAL	::= "!="
GT          ::= ">"
GE			::= ">="
Q_MARK		::= "?"
INC         ::= "++"
LAND        ::= "&&"
LOR			::= "||"
LE          ::= "<="
LT			::= "<"
LNOT        ::= "!"
MINUS       ::= "-"
MINUS_ASSIGN::= "-="
PLUS        ::= "+"
PLUS_ASSIGN ::= "+="
STAR        ::= "*"
STAR_ASSIGN	::= "*="
DIV			::= "/"
DIV_ASSIGN	::= "/="
REM			::= "%"
REM_ASSIGN	::= "%="
ARSHIFT		::= ">>"
ARSHIFT_ASN	::= ">>="	
ALSHIFT		::= "<<"
ALSHIFT_ASN	::= "<<="
LRSHIFT		::= ">>>"
LRSHIFT_ASN	::= ">>>="
IOR			::= "|"
IOR_ASSIGN	::= "|="
EOR			::= "^"
EOR_ASSIGN	::= "^="
AND			::= "&"
AND_ASSIGN	::= "&="
UCOMP		::= "~"

// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"
COLON		::= ":"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
LONG_LITERAL    ::= "0" (l|L) | ("1"-"9") {"0"-"9"} (l|L)

DOUBLE_LITERAL    ::= ("0"-"9") {"0"-"9"} . {"0"-"9"} [(e|E) [+|-] ("0"-"9") {"0"-"9"}][d|D] |
				      .("0"-"9") {"0"-"9"}[(e|E) [+|-] ("0"-"9") {"0"-"9"}][d|D] |
				      ("1"-"9") {"0"-"9"} (e|E) [+|-] ("1"-"9") {"0"-"9"} [d|D]) |
				      ("1"-"9") {"0"-"9"} [d|D] 
				
FLOAT_LITERAL    ::= ("1"-"9") {"0"-"9"} [.{"0"-"9"}] [(e|E) [+|-] ("0"-"9") {"0"-"9"}] (f|F) | 
				     .("1"-"9") {"0"-"9"} [(e|E) [+|-] ("0"-"9") {"0"-"9"}] (f|F)
							
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"


